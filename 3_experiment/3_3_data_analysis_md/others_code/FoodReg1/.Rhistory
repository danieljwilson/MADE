EffectHealthRight - EffectHealthRightSE,
EffecthealthLeft - EffectHealthLeftSE)
ymax = max(c(upper,lower))
ymin = min(c(upper,lower))
plot(1:maxRT,EffectTasteRight,ylim = c(ymin,ymax), type = 'n', main = paste('Subject', subjnames[SUBJ], sep = " "))
data = matrix(0,3,maxRT)
data[1,] = EffectTasteRight
data[2,] = EffectTasteRight - EffectTasteRightSE
data[3,] = EffectTasteRight + EffectTasteRightSE
lineanderrbars(data,rawdata=FALSE,color = 'red',linewidth = 2)
PredData[[SUBJ]]$TasteRightEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectTasteLeft
data[2,] = EffectTasteLeft - EffectTasteLeftSE
data[3,] = EffectTasteLeft + EffectTasteLeftSE
lineanderrbars(data,rawdata=FALSE,color = 'orange',linewidth = 2)
PredData[[SUBJ]]$TasteLeftEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectHealthRight
data[2,] = EffectHealthRight - EffectHealthRightSE
data[3,] = EffectHealthRight + EffectHealthRightSE
lineanderrbars(data,rawdata=FALSE,color = 'midnightblue',linewidth = 2)
PredData[[SUBJ]]$HealthRightEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectHealthLeft
data[2,] = EffectHealthLeft - EffectHealthLeftSE
data[3,] = EffectHealthLeft + EffectHealthLeftSE
lineanderrbars(data,rawdata=FALSE,color = 'orange',linewidth = 2)
PredData[[SUBJ]]$HealthLeftEffect = data
segments(0,0,maxRT,0,lty=2)
}
return(PredData)
}
Health_HTData = HTFunction(FullData,Cond = 'health')
HTFunction = function(Data, Cond = 'NULL'){
subjnames = unique(Data$SubjectID)
numSubjects = length(subjnames)
PredData = vector(mode = 'list', length = numSubjects)
quartz('',8,6)
par(mfrow = c(3,3))
par(mar = c(3,2,1,1) + .1)
for(SUBJ in 1:numSubjects){
print(paste('Working on', subjnames[SUBJ], sep = " "))
s = subset(Data, SubjectID == subjnames[SUBJ])
maxRT = max(s$RT)
s = subset(s,Condition == Cond)
numtrials = length(unique(s$Trial))
XPos = HealthRight = HealthLeft = TasteRight = TasteLeft = matrix(0,numtrials,maxRT)
EffectHealthRight = EffectHealthRightSE = EffectTasteRight = EffectTasteRightSE =vector(mode = 'numeric',length = maxRT)
EffectHealthLeft = EffectHealthLeftSE = EffectTasteLeft = EffectTasteLeftSE =vector(mode = 'numeric',length = maxRT)
for(time in 2:maxRT){
XPos[,time] = s$SignedX[s$Time == time]
HealthRight[,time] = s$RightHealth[s$Time == maxRT]
HealthLeft[,time] = s$LeftHealth[s$Time == maxRT]
TasteRight[,time] = s$RightTaste[s$Time == maxRT]
TasteLeft[,time] = s$LeftTaste[s$Time == maxRT]
t = summary(lm(XPos[,time] ~ HealthRight[,time] + HealthLeft[,time] + TasteRight[,time] + TasteLeft[,time],na.action = na.omit))
if(!is.na(t$coefficients['(Intercept)', 't value'])){
EffectHealthRight[time] = t$coefficients['HealthRight[, time]','Estimate']
EffectHealthRightSE[time] = t$coefficients['HealthRight[, time]','Std. Error']
EffectHealthLeft[time] = t$coefficients['HealthLeft[, time]','Estimate']
EffectHealthLeftSE[time] = t$coefficients['HealthLeft[, time]','Std. Error']
EffectTasteRight[time] = t$coefficients['TasteRight[, time]','Estimate']
EffectTasteRightSE[time] = t$coefficients['TasteRight[, time]','Std. Error']
EffectTasteLeft[time] = t$coefficients['TasteLeft[, time]','Estimate']
EffectTasteLeftSE[time] = t$coefficients['TasteLeft[, time]','Std. Error']
}else{
EffectHealthRight[time] = 0
EffectHealthRightSE[time] = 0
EffectHealthLeft[time] = 0
EffectHealthLeftSE[time] = 0
EffectTasteRight[time] = 0
EffectTasteRightSE[time] = 0
EffectTasteLeft[time] = 0
EffectTasteLeftSE[time] = 0
}
}
upper = c(EffectTasteRight + EffectTasteRightSE,
EffectTasteLeft + EffectTasteLeftSE,
EffectHealthRight + EffectHealthRightSE,
EffectHealthLeft + EffectHealthLeftSE)
lower = c(EffectTasteRight - EffectTasteRightSE,
EffectTasteLeft - EffectTasteLeftSE,
EffectHealthRight - EffectHealthRightSE,
EffectHealthLeft - EffectHealthLeftSE)
ymax = max(c(upper,lower))
ymin = min(c(upper,lower))
plot(1:maxRT,EffectTasteRight,ylim = c(ymin,ymax), type = 'n', main = paste('Subject', subjnames[SUBJ], sep = " "))
data = matrix(0,3,maxRT)
data[1,] = EffectTasteRight
data[2,] = EffectTasteRight - EffectTasteRightSE
data[3,] = EffectTasteRight + EffectTasteRightSE
lineanderrbars(data,rawdata=FALSE,color = 'red',linewidth = 2)
PredData[[SUBJ]]$TasteRightEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectTasteLeft
data[2,] = EffectTasteLeft - EffectTasteLeftSE
data[3,] = EffectTasteLeft + EffectTasteLeftSE
lineanderrbars(data,rawdata=FALSE,color = 'orange',linewidth = 2)
PredData[[SUBJ]]$TasteLeftEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectHealthRight
data[2,] = EffectHealthRight - EffectHealthRightSE
data[3,] = EffectHealthRight + EffectHealthRightSE
lineanderrbars(data,rawdata=FALSE,color = 'midnightblue',linewidth = 2)
PredData[[SUBJ]]$HealthRightEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectHealthLeft
data[2,] = EffectHealthLeft - EffectHealthLeftSE
data[3,] = EffectHealthLeft + EffectHealthLeftSE
lineanderrbars(data,rawdata=FALSE,color = 'orange',linewidth = 2)
PredData[[SUBJ]]$HealthLeftEffect = data
segments(0,0,maxRT,0,lty=2)
}
return(PredData)
}
Health_HTData = HTFunction(FullData,Cond = 'health')
HTFunction = function(Data, Cond = 'NULL'){
subjnames = unique(Data$SubjectID)
numSubjects = length(subjnames)
PredData = vector(mode = 'list', length = numSubjects)
quartz('',8,6)
par(mfrow = c(3,3))
par(mar = c(3,2,1,1) + .1)
for(SUBJ in 1:numSubjects){
print(paste('Working on', subjnames[SUBJ], sep = " "))
s = subset(Data, SubjectID == subjnames[SUBJ])
maxRT = max(s$RT)
s = subset(s,Condition == Cond)
numtrials = length(unique(s$Trial))
XPos = HealthRight = HealthLeft = TasteRight = TasteLeft = matrix(0,numtrials,maxRT)
EffectHealthRight = EffectHealthRightSE = EffectTasteRight = EffectTasteRightSE =vector(mode = 'numeric',length = maxRT)
EffectHealthLeft = EffectHealthLeftSE = EffectTasteLeft = EffectTasteLeftSE =vector(mode = 'numeric',length = maxRT)
for(time in 2:maxRT){
XPos[,time] = s$SignedX[s$Time == time]
HealthRight[,time] = s$RightHealth[s$Time == maxRT]
HealthLeft[,time] = s$LeftHealth[s$Time == maxRT]
TasteRight[,time] = s$RightTaste[s$Time == maxRT]
TasteLeft[,time] = s$LeftTaste[s$Time == maxRT]
t = summary(lm(XPos[,time] ~ HealthRight[,time] + HealthLeft[,time] + TasteRight[,time] + TasteLeft[,time],na.action = na.omit))
if(!is.na(t$coefficients['(Intercept)', 't value'])){
EffectHealthRight[time] = t$coefficients['HealthRight[, time]','Estimate']
EffectHealthRightSE[time] = t$coefficients['HealthRight[, time]','Std. Error']
EffectHealthLeft[time] = t$coefficients['HealthLeft[, time]','Estimate']
EffectHealthLeftSE[time] = t$coefficients['HealthLeft[, time]','Std. Error']
EffectTasteRight[time] = t$coefficients['TasteRight[, time]','Estimate']
EffectTasteRightSE[time] = t$coefficients['TasteRight[, time]','Std. Error']
EffectTasteLeft[time] = t$coefficients['TasteLeft[, time]','Estimate']
EffectTasteLeftSE[time] = t$coefficients['TasteLeft[, time]','Std. Error']
}else{
EffectHealthRight[time] = 0
EffectHealthRightSE[time] = 0
EffectHealthLeft[time] = 0
EffectHealthLeftSE[time] = 0
EffectTasteRight[time] = 0
EffectTasteRightSE[time] = 0
EffectTasteLeft[time] = 0
EffectTasteLeftSE[time] = 0
}
}
upper = c(EffectTasteRight + EffectTasteRightSE,
EffectTasteLeft + EffectTasteLeftSE,
EffectHealthRight + EffectHealthRightSE,
EffectHealthLeft + EffectHealthLeftSE)
lower = c(EffectTasteRight - EffectTasteRightSE,
EffectTasteLeft - EffectTasteLeftSE,
EffectHealthRight - EffectHealthRightSE,
EffectHealthLeft - EffectHealthLeftSE)
ymax = max(c(upper,lower))
ymin = min(c(upper,lower))
plot(1:maxRT,EffectTasteRight,ylim = c(ymin,ymax), type = 'n', main = paste('Subject', subjnames[SUBJ], sep = " "))
data = matrix(0,3,maxRT)
data[1,] = EffectTasteRight
data[2,] = EffectTasteRight - EffectTasteRightSE
data[3,] = EffectTasteRight + EffectTasteRightSE
lineanderrbars(data,rawdata=FALSE,color = 'red',linewidth = 2)
PredData[[SUBJ]]$TasteRightEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectTasteLeft
data[2,] = EffectTasteLeft - EffectTasteLeftSE
data[3,] = EffectTasteLeft + EffectTasteLeftSE
lineanderrbars(data,rawdata=FALSE,color = 'orange',linewidth = 2)
PredData[[SUBJ]]$TasteLeftEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectHealthRight
data[2,] = EffectHealthRight - EffectHealthRightSE
data[3,] = EffectHealthRight + EffectHealthRightSE
lineanderrbars(data,rawdata=FALSE,color = 'midnightblue',linewidth = 2)
PredData[[SUBJ]]$HealthRightEffect = data
data = matrix(0,3,maxRT)
data[1,] = EffectHealthLeft
data[2,] = EffectHealthLeft - EffectHealthLeftSE
data[3,] = EffectHealthLeft + EffectHealthLeftSE
lineanderrbars(data,rawdata=FALSE,color = 'springgreen4',linewidth = 2)
PredData[[SUBJ]]$HealthLeftEffect = data
segments(0,0,maxRT,0,lty=2)
}
return(PredData)
}
Health_HTData = HTFunction(FullData,Cond = 'health')
dev.copy2pdf(file = IndivPlots_HealthTasteonXPosbyAbsoluteTime_AllTrials.pdf')
dev.copy2pdf(file = 'IndivPlots_HealthTasteonXPosbyAbsoluteTime_AllTrials.pdf')
dev.copy2pdf(file = 'IndivPlots_HealthTasteonXPosbyAbsoluteTime_HealthTrials.pdf')
Natural_HTData = HTFunction(FullData,Cond = 'natural')
dev.copy2pdf(file = 'IndivPlots_HealthTasteonXPosbyAbsoluteTime_NaturalTrials.pdf')
Taste_HTData = HTFunction(FullData,Cond = 'taste')
dev.copy2pdf(file = 'IndivPlots_HealthTasteonXPosbyAbsoluteTime_TasteTrials.pdf')
load("~/Desktop/Dropbox/Projects/DVNR/DVNR.RData")
summary(glmmPQL(GenChoice ~ SelfProp*SelfAheadTrials
+ OtherProp*SelfAheadTrials
+ ExchangeRate,
random = ~1|Subject,family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
library(nlme)
library(MASS)
library(ggplot2)
library(logistf)
summary(glmmPQL(GenChoice ~ SelfProp*SelfAheadTrials
+ OtherProp*SelfAheadTrials
+ ExchangeRate,
random = ~1|Subject,family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
m = summary(lmer(GenChoice ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead + OtherPropBehind
+ ExchangeRate + (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
library(lme4)
m = summary(lmer(GenChoice ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead + OtherPropBehind
+ ExchangeRate + (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
m
m = summary(lmer(GenChoice ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead
+ ExchangeRate + (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
m
names(ChoiceData)
summary(lmer(GenChoice ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead + OtherPropBehind
+ ExchangeRateAbs + (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
m = summary(lmer(AcceptedProp ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead + OtherPropBehind
+ ExchangeRate + (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
m
ChoiceData$GenChoice2 = ChoiceData$AcceptedProp & ChoiceData$SelfProp < ChoiceData$OtherProp | !ChoiceData$AcceptedProp & ChoiceData$SelfProp > ChoiceData$OtherProp
summary(lmer(GenChoice2 ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead + OtherPropBehind
+ ExchangeRateAbs + (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
summary(lmer(GenChoice ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead + OtherPropBehind
+ ExchangeRateAbs + (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
summary(lmer(GenChoice ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead + OtherPropBehind
+ (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
summary(lmer(GenChoice ~ SelfPropAhead + SelfPropBehind
+ OtherPropAhead + OtherPropBehind
+ ExchangeRateAbs + (1|Subject),family = 'binomial',data = ChoiceData[ChoiceData$Instruction == 'None',]))
load("~/Desktop/Dropbox/Projects/DVNR-fMRI/Pilot_Data.RData")
library(debug)
source('~/Desktop/Dropbox/General/Rscripts/PrettyBarPlots.R')
debug(PrettyBarPlots)
var = 'MPC_PC1'
StatsPerCondition(psd,varname = var)
quartz('',3.25,2.75)
PrettyBarPlots(psd[,c(var,'Condition')],gpFactor = 'Condition', clrs=c('midnightblue','springgreen4','orange'),
sigWinPairs = list(c(1,2), c(1,3), c(2,3)), cex.axis = .6,dispOneSample=TRUE,
tcl = -.25, mgp = c(3,1.5,0), font = 2, ylbl = list('Weighting on', 'Principal Component 1'))
bp(181)
load("~/Desktop/Dropbox/Projects/LKB/LKB.RData")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/2.13/Resources/library")
quartz('',3,3)
ggplot(temp[temp$Type == 'LKM',], aes(x=Region, y=mean, colour=Period, size = 2)) +
geom_line() +
geom_point() + theme_bw() +
geom_errorbar(aes(ymin=mean-SE, ymax=mean+SE), width=.05, size = .5, color = 'black') +
theme(legend.position="none") +
scale_color_manual(values = c('blue','orange')) +
opts(axis.line = theme_segment(colour = "black"),
panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
panel.border = theme_blank(),
panel.background = theme_blank())
sessionInfo()
load("~/Desktop/Dropbox/Projects/SelfOtherFoodDM/Analysis/SODM.RData")
with(subset(psd, Condition == 'Self'),cor.test(M1_TasteWeight,M1_HealthWeight))
with(subset(psd, Condition == 'Self'),hist(M1_TasteWeight))
names(psd)
psd$HTRTDiff = psd$HealthRatingRT - psd$TasteRatingRT
subjNames = c(1,2,4:9, 11, 13:21,23:46, 49:50, 52:69,72:87,88:93,95,97)
nSubjects = length(subjNames)
source('Analysis/LoadSubjectData.R')
setwd('~/Desktop/Dropbox/Experiments/FoodReg1/')
source('~/Desktop/Dropbox/General/Rscripts/detachDataRS.R')$value() # clear out the workspace
rm(list = ls())
source('~/Desktop/Dropbox/General/Rscripts/lineanderrbars.R')
subjNames = c(1,2,4:9, 11, 13:21,23:46, 49:50, 52:69,72:87,88:93,95,97)
nSubjects = length(subjNames)
source('Analysis/LoadSubjectData.R')
MouseData = read.table(paste('SubjectData/',subjNames[1],'/MouseTracePerChoice_', subjNames[1], '.txt', sep = ""),sep = "\t",header = TRUE)
MouseData = read.table(paste('SubjectData/',subjNames[1],'/MouseTracePerChoice_', subjNames[1], '.txt', sep = ""),sep = "\t",header = TRUE)
for(subj in 2:nSubjects){ # subjNames[2:nSubjects]
print(paste('Loading', subjNames[subj]))
temp = read.table(paste('SubjectData/', subjNames[subj], '/MouseTracePerChoice_', subjNames[subj], '.txt', sep = ""),sep = "\t",header = TRUE)
MouseData = rbind.data.frame(MouseData,temp)
}
MouseData$Subject = as.factor(MouseData$Subject)
subjNames = c(1,2,4:9, 11, 13:21,23:46, 49:50, 52:69,72:87,89:93,95,97)
nSubjects = length(subjNames)
which(subjNames == 87)
for(subj in 79:nSubjects){
temp = read.table(paste('SubjectData/', subjNames[subj], '/MouseTrace100PerChoice_', subjNames[subj], '.txt', sep = ""),sep = "\t",header = TRUE)
MouseData100 = rbind.data.frame(MouseData100,temp)
}
MouseData100$Subject = as.factor(MouseData100$Subject)
for(subj in 79:nSubjects){ # subjNames[2:nSubjects]
print(paste('Loading', subjNames[subj]))
temp = read.table(paste('SubjectData/', subjNames[subj], '/MouseTracePerChoice_', subjNames[subj], '.txt', sep = ""),sep = "\t",header = TRUE)
MouseData = rbind.data.frame(MouseData,temp)
}
MouseData$Subject = as.factor(MouseData$Subject)
ChoiceData = read.table(paste('SubjectData/',subjNames[1],'/ChoiceData_', subjNames[1], '.txt', sep = ""),sep = "\t",header = TRUE)
for(subj in 2:nSubjects){
temp = read.table(paste('SubjectData/',subjNames[subj],'/ChoiceData_', subjNames[subj], '.txt', sep = ""),sep = "\t",header = TRUE)
ChoiceData = rbind.data.frame(ChoiceData,temp)
}
RatingData = read.table(paste('SubjectData/',subjNames[1],'/RatingDataForGLM_', subjNames[1], '.txt', sep = ""),sep = "\t",header = TRUE)
for(subj in 2:nSubjects){
temp = read.table(paste('SubjectData/',subjNames[subj],'/RatingDataForGLM_', subjNames[subj], '.txt', sep = ""),sep = "\t",header = TRUE)
RatingData = rbind.data.frame(RatingData,temp)
}
ChoiceData$DrxFirstDevChoice[ChoiceData$DrxFirstDevChoice == -1] = 0
ChoiceData$Choice[ChoiceData$Choice == -1] = 0
ChoiceData$Condition = 'nat'
ChoiceData$Condition[ChoiceData$Instruction == 'Focus on Health'] = 'health'
ChoiceData$Condition[ChoiceData$Instruction == 'Decrease Desire'] = 'decrease'
source('~/Desktop/Dropbox/Experiments/FoodReg1/Analysis/AddPerSubject.R')
subjNames = unique(ChoiceData$Subject)
nSubjects = length(subjNames)
psd = data.frame(Subject = rep(subjNames,each = 2), Cond = rep(c('nat','reg'), length(subjNames)))
psd$Instruction = 'nat'
psd$Instruction[psd$Cond == 'reg' & psd$Subject %% 2 == 0] = 'health'
psd$Instruction[psd$Cond == 'reg' & psd$Subject %% 2 == 1] = 'decrease'
f = function(x){
Accepted = with(x, Choice == 1)
ChoseHealthy = with(x,Choice == 1 & Health > 3 | Choice < 1 & Health <=3)
ChoseTasty = with(x, (Choice == 1 & Taste > 3) | (Choice == 0 & Taste <= 3))
ChoseHT = ChoseHealthy & ChoseTasty
ChoseHUT = ChoseHealthy & !ChoseTasty
ChoseUHT = !ChoseHealthy & ChoseTasty
ChoseUHUT = !ChoseHealthy & !ChoseTasty
FirstDevAccepted = with(x, DrxFirstDevChoice == 1)
FirstDevToTastiest = (x$Taste > 3 & x$DrxFirstDevChoice == 1) | (x$Taste <= 3 & x$DrxFirstDevChoice == 0)
FirstDevToHealthiest = (x$Health > 3 & x$DrxFirstDevChoice == 1) | (x$Health <= 3 & x$DrxFirstDevChoice == 0)
FirstChoseHT = FirstDevToHealthiest & FirstDevToTastiest
FirstChoseHUT = FirstDevToHealthiest & !FirstDevToTastiest
FirstChoseUHT = !FirstDevToHealthiest & FirstDevToTastiest
FirstChoseUHUT = !FirstDevToHealthiest & !FirstDevToTastiest
c(mean(Accepted, na.rm = TRUE), mean(FirstDevAccepted, na.rm = TRUE),
mean(ChoseHealthy,na.rm = TRUE),mean(ChoseTasty,na.rm = TRUE),
mean(ChoseHT, na.rm = TRUE), mean(ChoseHUT, na.rm = TRUE),
mean(ChoseUHT, na.rm = TRUE), mean(ChoseUHUT, na.rm = TRUE),
mean(FirstChoseHT, na.rm = TRUE), mean(FirstChoseHUT, na.rm = TRUE),
mean(FirstChoseUHT, na.rm = TRUE), mean(FirstChoseUHUT, na.rm = TRUE),
mean(ChoseHealthy[x$NumChangeMindChoice%%2 == 1],na.rm = TRUE),
mean(ChoseTasty[x$NumChangeMindChoice%%2 == 1],na.rm = TRUE),
mean(x$ChoiceRT,na.rm = TRUE),
mean(x$FirstDevTimeChoice,na.rm = TRUE),
mean(FirstDevToHealthiest,na.rm = TRUE),
mean(FirstDevToTastiest,na.rm = TRUE),
mean(x$FirstDevTimeChoice[ChoseHealthy],na.rm = TRUE),
mean(x$FirstDevTimeChoice[!ChoseHealthy],na.rm = TRUE),
mean(x$FirstDevTimeChoice[ChoseTasty],na.rm = TRUE),
mean(x$FirstDevTimeChoice[!ChoseTasty],na.rm = TRUE),
mean(x$ChoiceRT[ChoseHealthy],na.rm = TRUE),
mean(x$ChoiceRT[!ChoseHealthy],na.rm = TRUE),
mean(x$ChoiceRT[ChoseTasty],na.rm = TRUE),
mean(x$ChoiceRT[!ChoseTasty],na.rm = TRUE),
mean(x$ChoiceRT[ChoseHT],na.rm = TRUE),
mean(x$ChoiceRT[ChoseHUT],na.rm = TRUE),
mean(x$ChoiceRT[ChoseUHT],na.rm = TRUE),
mean(x$ChoiceRT[ChoseUHUT],na.rm = TRUE),
mean(x$NumChangeMindChoice[ChoseHealthy],na.rm = TRUE),
mean(x$NumChangeMindChoice[!ChoseHealthy],na.rm = TRUE),
mean(x$NumChangeMindChoice[ChoseTasty],na.rm = TRUE),
mean(x$NumChangeMindChoice[!ChoseTasty],na.rm = TRUE)
)
}
psd = AddPerSubject(ChoiceData, psd, f, varname = c('PercentAccepted','PercentFirstAccepted',
'PercentChoseHealthiest','PercentChoseTastiest',
'PercentChoseHT','PercentChoseHUT',
'PercentChoseUHT','PercentChoseUHUT',
'FirstPercentChoseHT','FirstPercentChoseHUT',
'FirstPercentChoseUHT','FirstPercentChoseUHUT',
'ChangedToHealthy','ChangedToTasty','RT',
'FirstDevTime','FirstDevDrxTowardHealthiest',
'FirstDevDrxTowardTastiest','FirstDevChoseHealthiest',
'FirstDevChoseLessHealthy','FirstDevChoseTastiest',
'FirstDevChoseLessTasty','RTChoseHealthiest',
'RTChoseLessHealthy','RTChoseTastiest',
'RTChoseLessTasty','RTChoseHT','RTChoseHUT',
'RTChoseUHT','RTChoseUHUT',
'NChangeMindChoseHealthiest','NChangeMindChoseLessHealthy',
'NChangeMindChoseTastiest','NChangeMindChoseLessTasty'))
psd$RT_HvUH = with(psd,RTChoseHealthiest - RTChoseLessHealthy)
psd$RT_TvUT = with(psd,RTChoseTastiest - RTChoseLessTasty)
psd$RT_HvUH_UT = with(psd,RTChoseHUT - RTChoseUHUT)
psd$RT_HvUH_T = with(psd,RTChoseHT - RTChoseUHT)
f = function(x){
c(
mean(x$FinalDevTimeChoice,na.rm = TRUE),
mean(x$NumChangeMindChoice,na.rm = TRUE)
)
}
psd = AddPerSubject(ChoiceData,psd,f,varname = c('FinalDevTime','NChangeMind'))
f = function(x){
m = summary(lm(Liking ~ Health + Taste, data = x, na.action = na.omit))
c(m$coefficients['Health','Estimate'],m$coefficients['Taste','Estimate'])
}
psd = AddPerSubject(ChoiceData,psd,f,c('HealthWeightLiking','TasteWeightLiking'))
f = function(x){
m1 = logistf(Choice ~ Health + Taste, data = x, na.action = na.omit)
m2= logistf(DrxFirstDevChoice ~ Health + Taste, data = x, na.action = na.omit)
#   m2= glm(DrxFirstDev ~ DiffHealth + DiffTaste, family = binomial(link = logit), data = x, na.action = na.omit)
c(m1$coefficients['(Intercept)'], m1$coefficients['Health'], m1$coefficients['Taste'],
m2$coefficients['(Intercept)'], m2$coefficients['Health'],m2$coefficients['Taste'])
}
psd = AddPerSubject(ChoiceData,psd,f,c('M1_Intercept','M1_HealthWeight','M1_TasteWeight'
,'M2_Intercept','M2_FirstDevHealthWeight','M2_FirstDevTasteWeight'))
require(logistf)
psd = AddPerSubject(ChoiceData,psd,f,c('M1_Intercept','M1_HealthWeight','M1_TasteWeight'
,'M2_Intercept','M2_FirstDevHealthWeight','M2_FirstDevTasteWeight'))
psd$HealthRegSucc = rep(psd$M1_HealthWeight[psd$Cond == 'reg'] - psd$M1_HealthWeight[psd$Cond == 'nat'], each = 2)
psd$TasteRegSucc = rep(psd$M1_TasteWeight[psd$Cond == 'nat'] - psd$M1_TasteWeight[psd$Cond == 'reg'], each = 2)
f = function(x){
m1 = logistf(Choice ~ Health + Liking, data = x, na.action = na.omit)
m2= logistf(DrxFirstDevChoice ~ Health + Liking, data = x, na.action = na.omit)
#   m2= glm(DrxFirstDev ~ DiffHealth + DiffTaste, family = binomial(link = logit), data = x, na.action = na.omit)
c(m1$coefficients['(Intercept)'], m1$coefficients['Health'], m1$coefficients['Liking'],
m2$coefficients['(Intercept)'], m2$coefficients['Health'],m2$coefficients['Liking'])
}
psd = AddPerSubject(ChoiceData,psd,f,c('M3_Intercept','M3_HealthWeight','M3_LikingWeight'
,'M4_Intercept','M4_FirstDevHealthWeight','M4_FirstDevTasteWeight'))
f = function(x){
cor.test(x$Rating[x$Attribute == 'Taste'],x$Rating[x$Attribute == 'Health'])$estimate
}
psd = AddPerSubject(RatingData,psd, f, varname = 'HTCorrel', byCond = FALSE)
f = function(x){
c(mean(x$RT[x$Attribute == 'Health']), mean(x$RT[x$Attribute == 'Taste']), sd(x$RT[x$Attribute == 'Health']),sd(x$RT[x$Attribute == 'Taste']))
}
psd = AddPerSubject(RatingData,psd,f,varname = c('HealthRT','TasteRT','HealthRTSD','TasteRTSD'), byCond = FALSE)
t.test(psd$PercentAccepted[psd$Instruction == 'health'], psd$PercentAccepted[psd$Instruction == 'decrease'])
t.test(psd$RT[psd$Instruction == 'health'], psd$RT[psd$Instruction == 'decrease'])
t.test(psd$RT[psd$Instruction == 'health'], psd$RT[psd$Instruction == 'decrease'], var.equal = TRUE)
t.test(psd$M1_HealthWeight[psd$Instruction == 'health'], psd$M1_HealthWeight[psd$Instruction == 'decrease'], var.equal = TRUE)
t.test(psd$M1_TasteWeight[psd$Instruction == 'health'], psd$M1_TasteWeight[psd$Instruction == 'decrease'], var.equal = TRUE)
t.test(psd$M3_LikingWeight[psd$Instruction == 'health'], psd$M3_LikingWeight[psd$Instruction == 'decrease'], var.equal = TRUE)
t.test(psd$M1_TasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$M1_TasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$HealthRegSucc[psd$Instruction == 'health'], psd$HealthRegSucc[psd$Instruction == 'decrease'], var.equal = TRUE)
t.test(psd$TasteRegSucc[psd$Instruction == 'health'], psd$TasteRegSucc[psd$Instruction == 'decrease'], var.equal = TRUE)
t.test(psd$TasteRegSucc[psd$Instruction == 'health'], psd$TasteRegSucc[psd$Instruction == 'decrease'], var.equal = FALSE)
t.test(psd$TasteRegSucc[psd$Instruction == 'health'], psd$TasteRegSucc[psd$Instruction == 'decrease'], var.equal = TRUE)
t.test(psd$M2_FirstDevTasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$M2_FirstDevTasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M2_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$M2_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M1_TasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$M1_TasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M1_Intercept[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$M1_Intercept[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M1_Intercept[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$M1_Intercept[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M2_Intercept[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$M2_Intercept[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M2_Intercept[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$M2_Intercept[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$PercentAccepted[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$PercentAccepted[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$PercentAccepted[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$PercentAccepted[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$HealthWeightLiking[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$HealthWeightLiking[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$HealthWeightLiking[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$HealthWeightLiking[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$TasteWeightLiking[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$TasteWeightLiking[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$TasteWeightLiking[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$TasteWeightLiking[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$RT[psd$Instruction == 'health'], psd$RT[psd$Instruction == 'decrease'], var.equal = TRUE)
t.test(psd$RT[psd$Cond == 'reg' & psd$Subject %% 2 == 1] - psd$RT[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$RT[psd$Cond == 'reg' & psd$Subject %% 2 == 0] - psd$RT[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M1_HealthWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$M1_HealthWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 10], var.equal = TRUE)
t.test(psd$M1_HealthWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$M1_HealthWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$RT[psd$Cond == 'reg' & psd$Subject %% 2 == 1] - psd$RT[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$RT[psd$Cond == 'reg' & psd$Subject %% 2 == 0] - psd$RT[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M1_HealthWeight[psd$Instruction == 'health'], psd$M1_HealthWeight[psd$Instruction == 'decrease'], var.equal = FALSE)
t.test(psd$RT[psd$Cond == 'reg' & psd$Subject %% 2 == 1] - psd$RT[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$RT[psd$Cond == 'reg' & psd$Subject %% 2 == 0] - psd$RT[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = FALSE)
t.test(psd$NChangeMind[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$NChangeMind[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$NChangeMind[psd$Cond == 'reg' & psd$Subject %% 2 == 1] - psd$NChangeMind[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$NChangeMind[psd$Cond == 'reg' & psd$Subject %% 2 == 0] - psd$NChangeMind[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$NChangeMind[psd$Cond == 'reg' & psd$Subject %% 2 == 1], psd$NChangeMind[psd$Cond == 'nat' & psd$Subject %% 2 == 1], paired = TRUE)
t.test(psd$NChangeMind[psd$Cond == 'reg' & psd$Subject %% 2 == 0], psd$NChangeMind[psd$Cond == 'nat' & psd$Subject %% 2 == 0], paired = TRUE)
t.test(psd$M2_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1]
, psd$M2_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M2_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1] - psd$M2_FirstDevTasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$M2_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 0] - psd$M2_FirstDevTasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M1_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1] - psd$M1_FirstDevTasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$M1_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 0] - psd$M1_FirstDevTasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M1_TasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1] - psd$M1_TasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$M1_TasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 0] - psd$M1_TasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
t.test(psd$M2_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 1] - psd$M2_FirstDevTasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 1]
, psd$M2_FirstDevTasteWeight[psd$Cond == 'reg' & psd$Subject %% 2 == 0] - psd$M2_FirstDevTasteWeight[psd$Cond == 'nat' & psd$Subject %% 2 == 0], var.equal = TRUE)
