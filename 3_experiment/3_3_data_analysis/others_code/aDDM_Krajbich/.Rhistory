load("et2_data_raw.RData")
View(data)
test <- data
unique(test$subject)
length(unique(test$subject))
load("et2_data_raw.RData")
load("et2_data_raw.RData")
data$rt = data$rt*1000  # turn rts into ms instead of seconds
data$fixDur = data$fixDur*1000  # turn fixDurs into ms instead of seconds
# data<-sims #if you are reading in simulations
# data<-data[data$subject==10,] #use this for individual subject analysis
lower_bound<-200 #lower RT bound in ms
upper_bound<-15000 #upper RT bound in ms
dmaxfix<-max(data$revFixNum) #maximum number of fixations (use the data to specify)
#############################
#throw out "fast guesses" and really long outliers
data<-data[data$rt>lower_bound & data$rt<upper_bound,]
#make roi 1 and 2 to match Krajbich
data$roi <- data$roi + 1
#basic features of the data
drois<-as.numeric(length(unique(data$roi))) #how many rois?
temp<-data[data$fixNum==1,]
dtrials<-nrow(temp) #how many trials total?
rm(temp)
#create version of dataset with only middle fixations (we use this later for drawing random middle fixations)
temp<-data[(data$fixNum>1 & data$revFixNum>1),]
#prepare data matrix
data_mat<-matrix(0,nrow=dtrials,ncol=(2+drois+dmaxfix*2)) #choice,rt,roi values,rois,fixation lengths
#two item case
if (drois==2){
n=0
for (i in 1:nrow(data)){
if (data$fixNum[i]==1){
n<-n+1
data_mat[n,1]<-data$choice[i] #1=left choice, 0=right choice
data_mat[n,2]<-data$rt[i] #in milliseconds
data_mat[n,3]<-data$totValHouse[i] #left value
data_mat[n,4]<-data$totValFace[i] #right value
data_mat[n,5]<-data$roi[i] #1=left, 2=right
data_mat[n,(5+dmaxfix)]<-data$fixDur[i] *1000 #fixation duration in ms
}
if (data$fixNum[i]>1){
data_mat[n,(4+data$fixnum[i])]<-data$roi[i]
data_mat[n,(4+dmaxfix+data$fixNum[i])]<-data$fixDur[i] *1000
}
}
}
#fill in missing fixation locations and durations for 2 items
if (randfix==1 & drois==2){
####fill in missing fixation locations
first_rois<-data_mat[,5]
dim(first_rois)<-c(nrow(data_mat),1)
second_rois<-3-data_mat[,5]
dim(second_rois)<-c(nrow(data_mat),1)
#cover the case of even nmaxfix
if ((dmaxfix %% 2) == 0){
roi_mat<-rep(c(first_rois,second_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix))
data_mat[,5:(4+dmaxfix)]<-roi_mat
}
#cover the case of odd nmaxfix
if ((dmaxfix %% 2) == 1){
roi_mat<-rep(c(second_rois,first_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix-1))
data_mat[,6:(4+dmaxfix)]<-roi_mat
}
####fill in missing fixation durations
pfixmat<-sample(temp$fixDur,dmaxfix*nrow(data_mat),replace=TRUE)
dim(pfixmat)<-c(nrow(data_mat),dmaxfix)
#matrix with 1s for missing fixations and 0s for non-missing fixations
fix_mat<-ceiling((1-(data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]))/1000000)
data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]<-data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]+fix_mat*pfixmat
}
#remove everything but data_mat
rm(data,dmaxfix,drois,dtrials,first_rois,fix_mat,i,n,pfixmat,randfix,roi_mat,second_rois,temp,lower_bound,upper_bound,j,prois)
#now save this workspace file with a name of your choosing (comment out for manual saving)
save(data_mat,file="~/Dropbox/PROGRAMMING/*NEURO/aDDM_Krajbich/original_prepped.RData")
setwd("~/Dropbox/PROGRAMMING/*NEURO/aDDM_Krajbich")
randfix<-1 #do you want to add random fixations when the data runs out?
load("et2_data_raw.RData")
data$rt = data$rt*1000  # turn rts into ms instead of seconds
data$fixDur = data$fixDur*1000  # turn fixDurs into ms instead of seconds
# data<-sims #if you are reading in simulations
# data<-data[data$subject==10,] #use this for individual subject analysis
lower_bound<-200 #lower RT bound in ms
upper_bound<-15000 #upper RT bound in ms
dmaxfix<-max(data$revFixNum) #maximum number of fixations (use the data to specify)
dmaxfix<-max(data$revFixNum) #maximum number of fixations (use the data to specify)
dmaxfix<-max(data$revfixnum)
#throw out "fast guesses" and really long outliers
data<-data[data$rt>lower_bound & data$rt<upper_bound,]
#make roi 1 and 2 to match Krajbich
data$roi <- data$roi + 1
#basic features of the data
drois<-as.numeric(length(unique(data$roi))) #how many rois?
temp<-data[data$fixNum==1,]
dtrials<-nrow(temp) #how many trials total?
rm(temp)
#create version of dataset with only middle fixations (we use this later for drawing random middle fixations)
temp<-data[(data$fixNum>1 & data$revFixNum>1),]
#prepare data matrix
data_mat<-matrix(0,nrow=dtrials,ncol=(2+drois+dmaxfix*2)) #choice,rt,roi values,rois,fixation lengths
#two item case
if (drois==2){
n=0
for (i in 1:nrow(data)){
if (data$fixNum[i]==1){
n<-n+1
data_mat[n,1]<-data$choice[i] #1=left choice, 0=right choice
data_mat[n,2]<-data$rt[i] #in milliseconds
data_mat[n,3]<-data$totValHouse[i] #left value
data_mat[n,4]<-data$totValFace[i] #right value
data_mat[n,5]<-data$roi[i] #1=left, 2=right
data_mat[n,(5+dmaxfix)]<-data$fixDur[i] *1000 #fixation duration in ms
}
if (data$fixNum[i]>1){
data_mat[n,(4+data$fixnum[i])]<-data$roi[i]
data_mat[n,(4+dmaxfix+data$fixNum[i])]<-data$fixDur[i] *1000
}
}
}
#fill in missing fixation locations and durations for 2 items
if (randfix==1 & drois==2){
####fill in missing fixation locations
first_rois<-data_mat[,5]
dim(first_rois)<-c(nrow(data_mat),1)
second_rois<-3-data_mat[,5]
dim(second_rois)<-c(nrow(data_mat),1)
#cover the case of even nmaxfix
if ((dmaxfix %% 2) == 0){
roi_mat<-rep(c(first_rois,second_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix))
data_mat[,5:(4+dmaxfix)]<-roi_mat
}
#cover the case of odd nmaxfix
if ((dmaxfix %% 2) == 1){
roi_mat<-rep(c(second_rois,first_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix-1))
data_mat[,6:(4+dmaxfix)]<-roi_mat
}
####fill in missing fixation durations
pfixmat<-sample(temp$fixDur,dmaxfix*nrow(data_mat),replace=TRUE)
dim(pfixmat)<-c(nrow(data_mat),dmaxfix)
#matrix with 1s for missing fixations and 0s for non-missing fixations
fix_mat<-ceiling((1-(data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]))/1000000)
data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]<-data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]+fix_mat*pfixmat
}
#remove everything but data_mat
rm(data,dmaxfix,drois,dtrials,first_rois,fix_mat,i,n,pfixmat,randfix,roi_mat,second_rois,temp,lower_bound,upper_bound,j,prois)
#now save this workspace file with a name of your choosing (comment out for manual saving)
save(data_mat,file="~/Dropbox/PROGRAMMING/*NEURO/aDDM_Krajbich/original_prepped.RData")
#two item case
if (drois==2){
n=0
for (i in 1:nrow(data)){
if (data$fixNum[i]==1){
n<-n+1
data_mat[n,1]<-data$choice[i] #1=left choice, 0=right choice
data_mat[n,2]<-data$rt[i] #in milliseconds
data_mat[n,3]<-data$totValHouse[i] #left value
data_mat[n,4]<-data$totValFace[i] #right value
data_mat[n,5]<-data$roi[i] #1=left, 2=right
data_mat[n,(5+dmaxfix)]<-data$fixDur[i] *1000 #fixation duration in ms
}
if (data$fixNum[i]>1){
data_mat[n,(4+data$fixnum[i])]<-data$roi[i]
data_mat[n,(4+dmaxfix+data$fixNum[i])]<-data$fixDur[i] *1000
}
}
}
#fill in missing fixation locations and durations for 2 items
if (randfix==1 & drois==2){
####fill in missing fixation locations
first_rois<-data_mat[,5]
dim(first_rois)<-c(nrow(data_mat),1)
second_rois<-3-data_mat[,5]
dim(second_rois)<-c(nrow(data_mat),1)
#cover the case of even nmaxfix
if ((dmaxfix %% 2) == 0){
roi_mat<-rep(c(first_rois,second_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix))
data_mat[,5:(4+dmaxfix)]<-roi_mat
}
#cover the case of odd nmaxfix
if ((dmaxfix %% 2) == 1){
roi_mat<-rep(c(second_rois,first_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix-1))
data_mat[,6:(4+dmaxfix)]<-roi_mat
}
####fill in missing fixation durations
pfixmat<-sample(temp$fixDur,dmaxfix*nrow(data_mat),replace=TRUE)
dim(pfixmat)<-c(nrow(data_mat),dmaxfix)
#matrix with 1s for missing fixations and 0s for non-missing fixations
fix_mat<-ceiling((1-(data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]))/1000000)
data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]<-data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]+fix_mat*pfixmat
}
randfix<-1 #do you want to add random fixations when the data runs out?
#fill in missing fixation locations and durations for 2 items
if (randfix==1 & drois==2){
####fill in missing fixation locations
first_rois<-data_mat[,5]
dim(first_rois)<-c(nrow(data_mat),1)
second_rois<-3-data_mat[,5]
dim(second_rois)<-c(nrow(data_mat),1)
#cover the case of even nmaxfix
if ((dmaxfix %% 2) == 0){
roi_mat<-rep(c(first_rois,second_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix))
data_mat[,5:(4+dmaxfix)]<-roi_mat
}
#cover the case of odd nmaxfix
if ((dmaxfix %% 2) == 1){
roi_mat<-rep(c(second_rois,first_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix-1))
data_mat[,6:(4+dmaxfix)]<-roi_mat
}
####fill in missing fixation durations
pfixmat<-sample(temp$fixDur,dmaxfix*nrow(data_mat),replace=TRUE)
dim(pfixmat)<-c(nrow(data_mat),dmaxfix)
#matrix with 1s for missing fixations and 0s for non-missing fixations
fix_mat<-ceiling((1-(data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]))/1000000)
data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]<-data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]+fix_mat*pfixmat
}
data$rt = data$rt*1000  # turn rts into ms instead of seconds
data$fixDur = data$fixDur*1000  # turn fixDurs into ms instead of seconds
# data<-sims #if you are reading in simulations
# data<-data[data$subject==10,] #use this for individual subject analysis
lower_bound<-200 #lower RT bound in ms
upper_bound<-15000 #upper RT bound in ms
dmaxfix<-max(data$revfixnum)
# dmaxfix<-max(data$revFixNum) #maximum number of fixations (use the data to specify)
#############################
#throw out "fast guesses" and really long outliers
data<-data[data$rt>lower_bound & data$rt<upper_bound,]
#make roi 1 and 2 to match Krajbich
data$roi <- data$roi + 1
#basic features of the data
drois<-as.numeric(length(unique(data$roi))) #how many rois?
temp<-data[data$fixNum==1,]
dtrials<-nrow(temp) #how many trials total?
rm(temp)
#create version of dataset with only middle fixations (we use this later for drawing random middle fixations)
temp<-data[(data$fixNum>1 & data$revFixNum>1),]
#prepare data matrix
data_mat<-matrix(0,nrow=dtrials,ncol=(2+drois+dmaxfix*2)) #choice,rt,roi values,rois,fixation lengths
rm(list=ls())
library(gtools)
setwd("~/Dropbox/PROGRAMMING/*NEURO/aDDM_Krajbich")
randfix<-1 #do you want to add random fixations when the data runs out?
load("et2_data_raw.RData")
data$rt = data$rt*1000  # turn rts into ms instead of seconds
data$fixDur = data$fixDur*1000  # turn fixDurs into ms instead of seconds
load("S_M_K.RData") #specify the data file
rm(list=ls())
library(gtools)
setwd("~/Dropbox/PROGRAMMING/*NEURO/aDDM_Krajbich")
randfix<-1 #do you want to add random fixations when the data runs out?
load("et2_data_raw.RData")
lower_bound<-200 #lower RT bound in ms
upper_bound<-15000 #upper RT bound in ms
dmaxfix<-max(data$revfixnum)
data<-data[data$rt>lower_bound & data$rt<upper_bound,]
data$roi <- data$roi + 1
drois<-as.numeric(length(unique(data$roi))) #how many rois?
temp<-data[data$fixNum==1,]
dtrials<-nrow(temp) #how many trials total?
rm(temp)
temp<-data[(data$fixNum>1 & data$revFixNum>1),]
data_mat<-matrix(0,nrow=dtrials,ncol=(2+drois+dmaxfix*2)) #choice,rt,roi values,rois,fixation lengths
if (drois==2){
n=0
for (i in 1:nrow(data)){
if (data$fixNum[i]==1){
n<-n+1
data_mat[n,1]<-data$choice[i] #1=left choice, 0=right choice
data_mat[n,2]<-data$rt[i] #in milliseconds
data_mat[n,3]<-data$totValHouse[i] #left value
data_mat[n,4]<-data$totValFace[i] #right value
data_mat[n,5]<-data$roi[i] #1=left, 2=right
data_mat[n,(5+dmaxfix)]<-data$fixDur[i] *1000 #fixation duration in ms
}
if (data$fixNum[i]>1){
data_mat[n,(4+data$fixnum[i])]<-data$roi[i]
data_mat[n,(4+dmaxfix+data$fixNum[i])]<-data$fixDur[i] *1000
}
}
}
rm(list=ls())
library(gtools)
randfix<-1 #do you want to add random fixations when the data runs out?
load("et2_data_raw.RData") #specify the data file
lower_bound<-0 #lower RT bound in ms
upper_bound<-100000 #upper RT bound in ms
dmaxfix<-max(data$revfixnum) #maximum number of fixations (use the data to specify)
data<-data[data$rt>lower_bound & data$rt<upper_bound,]
drois<-max(data$roi) #how many rois?
temp<-data[data$fixnum==1,]
dtrials<-nrow(temp) #how many trials total?
rm(temp)
temp<-data[(data$fixnum>1 & data$revfixnum>1),]
data_mat<-matrix(0,nrow=dtrials,ncol=(2+drois+dmaxfix*2)) #choice,rt,roi values,rois,fixation lengths
if (drois==2){
n=0
for (i in 1:nrow(data)){
if (data$fixnum[i]==1){
n<-n+1
data_mat[n,1]<-data$choice[i] #1=left choice, 0=right choice
data_mat[n,2]<-data$rt[i] #in milliseconds
data_mat[n,3]<-data$leftval[i] #left value
data_mat[n,4]<-data$rightval[i] #right value
data_mat[n,5]<-data$roi[i] #1=left, 2=right
data_mat[n,(5+dmaxfix)]<-data$fixdur[i] #fixation duration in ms
}
if (data$fixnum[i]>1){
data_mat[n,(4+data$fixnum[i])]<-data$roi[i]
data_mat[n,(4+dmaxfix+data$fixnum[i])]<-data$fixdur[i]
}
}
}
if (randfix==1 & drois==2){
####fill in missing fixation locations
first_rois<-data_mat[,5]
dim(first_rois)<-c(nrow(data_mat),1)
second_rois<-3-data_mat[,5]
dim(second_rois)<-c(nrow(data_mat),1)
#cover the case of even nmaxfix
if (even(dmaxfix)){
roi_mat<-rep(c(first_rois,second_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix))
data_mat[,5:(4+dmaxfix)]<-roi_mat
}
#cover the case of odd nmaxfix
if (odd(dmaxfix)){
roi_mat<-rep(c(second_rois,first_rois),floor(dmaxfix/2))
dim(roi_mat)<-c(nrow(data_mat),(dmaxfix-1))
data_mat[,6:(4+dmaxfix)]<-roi_mat
}
####fill in missing fixation durations
pfixmat<-sample(temp$fixdur,dmaxfix*nrow(data_mat),replace=TRUE)
dim(pfixmat)<-c(nrow(data_mat),dmaxfix)
#matrix with 1s for missing fixations and 0s for non-missing fixations
fix_mat<-ceiling((1-(data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]))/1000000)
data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]<-data_mat[1:nrow(data_mat),(5+dmaxfix):ncol(data_mat)]+fix_mat*pfixmat
}
rm(data,dmaxfix,drois,dtrials,first_rois,fix_mat,i,n,pfixmat,randfix,roi_mat,second_rois,temp,lower_bound,upper_bound,j,prois)
save(data_mat,file="et2_data_prepped.RData")
load("et2_data_prepped.RData")
View(data_mat)
sim_addm_fun_to_share<-function(nsim,d,sigma,theta,ndt,dsigma,data_mat){
# random number generator library
library(RcppZiggurat)
ntrial<-nrow(data_mat) #number of unique trials in the dataset (get this from the data)
maxfix<-(ncol(data_mat)-4)/2 #maximum number of fixations in a given trial
#preallocate the simulation vectors
rt<-rep(0,nsim*maxfix*ntrial) #reaction time vector
choice<-rep(-1,nsim*maxfix*ntrial) #choice vector
fixnum<-rep(-1,nsim*maxfix*ntrial) #fixation number vector
revfixnum<-rep(-1,nsim*maxfix*ntrial) #reverse fixation number vector
fixdur<-rep(-1,nsim*maxfix*ntrial) #fixation duration vector
nfix<-rep(-1,nsim*maxfix*ntrial) #total number of fixations vector
roi<-rep(-1,nsim*maxfix*ntrial) #roi vector
leftval<-rep(-1,nsim*maxfix*ntrial) #left value vector
rightval<-rep(-1,nsim*maxfix*ntrial) #right value vector
roi_mat<-data_mat[,5:(4+maxfix)]
fixlength_mat<-data_mat[,(5+maxfix):ncol(data_mat)]
value_mat<-(roi_mat==1)*data_mat[,3]+(roi_mat==2)*data_mat[,4]
lvalue_mat<-data_mat[,3]*matrix(1,nrow=nrow(data_mat),ncol=maxfix)
rvalue_mat<-data_mat[,4]*matrix(1,nrow=nrow(data_mat),ncol=maxfix)
drift_mat<-d*((roi_mat==1)*(lvalue_mat-theta*rvalue_mat)+(roi_mat==2)*(theta*lvalue_mat-rvalue_mat))
counter<-1
#loop over unique trials
for (k in 1:ntrial){
nroi<-roi_mat[k,]
nfixlength<-fixlength_mat[k,]
ndrift<-drift_mat[k,]
ntemp = cumsum(nfixlength)
index = rep(0,max(ntemp))
index[ntemp[1:length(ntemp)-1]+1] = 1
index[1] = 1
index = cumsum(index)
bigdrift = ndrift[index]
#presample vector of noise to sample from
maxt<-max(ntemp) #maximum possible RT (in ms)
noises<-zrnorm(maxt*nsim)*sigma #pre-assemble vector of noise to sample from
#presample across-trial noise
dnoises<-zrnorm(nsim)*dsigma
j<-0
#loop over number of simulations per trial
for (i in 1:nsim){
trt<-Inf
j<-j+1
noise<-noises[((j-1)*maxt+1):((j)*maxt)] #sample noise realizations
evidence<-bigdrift+noise+dnoises[i] #add drift to noise
RDV<-cumsum(evidence)#sum up the evidence
absRDV<-abs(RDV)
trt<-min(which(absRDV>=1))#find the first time that the evidence exceeds a magnitude of 1
ifelse(trt==Inf,trt<-maxt,trt<-trt)#set maxt as the finishing time if time runs out
#save the trial data
fix.num<-min(which(cumsum(nfixlength)>=trt))
nfix[counter:(counter+fix.num-1)]<-fix.num
choice[counter:(counter+fix.num-1)]<-ceiling(RDV[trt]/1000000) #was the RDV + or -?
rt[counter:(counter+fix.num-1)]<-trt+ndt #add non-decision time to the RT
fixnum[counter:(counter+fix.num-1)]<-(1:fix.num)
revfixnum[counter:(counter+fix.num-1)]<-(fix.num:1)
roi[counter:(counter+fix.num-1)]<-nroi[1:fix.num]
leftval[counter:(counter+fix.num-1)]<-lvalue_mat[k,1]
rightval[counter:(counter+fix.num-1)]<-rvalue_mat[k,1]
#fix the last fixation time
tfix.length = nfixlength[1:fix.num]
erro = sum(tfix.length)-trt
tfix.length[fix.num] = tfix.length[fix.num]-erro
fixdur[counter:(counter+fix.num-1)]<-tfix.length
counter<-counter+fix.num
}
}
sims<-data.frame(choice,rt,fixnum,nfix,revfixnum,roi,leftval,rightval,fixdur)
sims<-sims[sims$choice>=0,]
sims<-sims[sims$rt<(maxt+ndt),] #remove trials that did not finish
rm(noises,absRDV,bigdrift,choice,counter,data_mat,drift_mat,erro,evidence,fix.num,fixdur,fixlength_mat,fixnum,i,index,j,k,leftval,lvalue_mat,maxfix,maxt,ndrift,nfix,nfixlength,noise,nroi,nsim,ntemp,ntrial,RDV,revfixnum,rightval,roi,roi_mat,rt,rvalue_mat,tfix.length,trt,value_mat)
return(sims)
}
sims2 = sim_addm_fun_to_share(100,.000065,.02,.7,300,0,data_mat)
View(sims2)
View(sims2)
View(sims2)
